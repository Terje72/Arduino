/*
  NTP-TZ-DST (v2)
  NetWork Time Protocol - Time Zone - Daylight Saving Time

  This example shows:
  - how to read and set time
  - how to set timezone per country/city
  - how is local time automatically handled per official timezone definitions

  This example code is in the public domain.
*/


// This database is autogenerated from IANA timezone database
//    https://www.iana.org/time-zones
// and can be updated on demand in this repository
#include <TZ.h>

// "TZ_" macros follow DST change across seasons without source code change
// check for your nearest city in TZ.h

// select espressif headquarter TZ
#define MYTZ TZ_Asia_Shanghai

// example for "Not Only Whole Hours" timezones:
// Kolkata/Calcutta is shifted by 30mn
//#define MYTZ TZ_Asia_Kolkata

// example to watch automatic local time time adjustment on Summer/Winter change
// (exactly 182 days (~6 month) are regularly added or substracted in the example)
//#define MYTZ TZ_Europe_Paris

////////////////////////////////////////////////////////

#include <ESP8266WiFi.h>
#include <time.h>                       // time() ctime()
#include <sys/time.h>                   // struct timeval
#include <coredecls.h>                  // settimeofday_cb()

#ifndef STASSID
#define STASSID "your-ssid"
#define STAPSK  "your-password"
#endif

// initial time (possibly given by an external RTC)
#define RTC_UTC_TEST 1510592825 // 1510592825 = Monday 13 November 2017 17:07:05 UTC

////////////////////////////////////////////////////////

timeval tv;
timespec tp;
time_t now;
uint32_t now_ms, now_us;
time_t next_6months_change;
bool add6months;

bool time_is_set = false;

void time_is_set_callback(void) {
  time_is_set = true;
}

void setup() {
  Serial.begin(115200);

  // setup RTC time
  // will be used until NTP set date
  time_t rtc = RTC_UTC_TEST;
  timeval tv = { rtc, 0 };
  timezone tz = { 0, 0 };
  settimeofday(&tv, &tz);

  // for demo pupose
  next_6months_change = 0;
  add6months = true;

  // install callback - called when settimeofday is called (by SNTP or us)
  // once enabled (by DHCP), SNTP is updated every hour
  settimeofday_cb(time_is_set_callback);

  // NTP servers may be overriden by your DHCP server for a more local one
  configTime(MYTZ, "pool.ntp.org");

  // start network
  WiFi.mode(WIFI_STA);
  WiFi.begin(STASSID, STAPSK);

  // don't wait for network, observe time changing
  // when NTP timestamp is received
}

// for testing purpose:
extern "C" int clock_gettime(clockid_t unused, struct timespec *tp);

#define PTM(w) \
  Serial.print(" " #w "="); \
  Serial.print(tm->tm_##w);

void printTm(const char* what, const tm* tm) {
  Serial.print(what);
  PTM(isdst); PTM(yday); PTM(wday);
  PTM(year);  PTM(mon);  PTM(mday);
  PTM(hour);  PTM(min);  PTM(sec);
}

void loop() {
  gettimeofday(&tv, nullptr);
  clock_gettime(0, &tp);
  now = time(nullptr);
  now_ms = millis();
  now_us = micros();

  if (time_is_set) {
    Serial.println("\n----------> settimeofday() has been called! <----------\n");
    time_is_set = false;
    next_6months_change = tv.tv_sec + 20;
  }

  // for demo purpose, switch 6 months back and forth
  if (next_6months_change > 0 && tv.tv_sec >= next_6months_change) {
    tv.tv_sec += (add6months ? 1 : -1) * (60 * 60 * 24 * 364 / 2);
    settimeofday(&tv, nullptr);
    Serial.printf("\n"
                  "-- time machine, artificially moving 6 months %s\n"
                  "-- observe local time change according to selected TZ's DST rules\n"
                  "-- (and without assistance from sketch)\n"
                  "\n",
                  add6months ? "forward (future)" : "backward (to now)");
    add6months = !add6months;

    // will be reset when "time_is_set"
    next_6months_change = 0;
    return;
  }

  printTm("localtime:", localtime(&now));
  Serial.println();
  printTm("gmtime:   ", gmtime(&now));
  Serial.println();

  // time from boot
  Serial.print("clock:     ");
  Serial.print((uint32_t)tp.tv_sec);
  Serial.print("s / ");
  Serial.print((uint32_t)tp.tv_nsec);
  Serial.println("ns");

  // time from boot
  Serial.print("millis:    ");
  Serial.println(now_ms);
  Serial.print("micros:    ");
  Serial.println(now_us);

  // EPOCH+tz+dst
  Serial.print("gtod:      ");
  Serial.print((uint32_t)tv.tv_sec);
  Serial.print("s / ");
  Serial.print((uint32_t)tv.tv_usec);
  Serial.println("us");

  // EPOCH+tz+dst
  Serial.print("time:      ");
  Serial.println((uint32_t)now);

  // timezone and shift-demo in the future
  Serial.printf("timezone:  %s\n", MYTZ);
  Serial.printf("+6 months: %s (next change in %d seconds)\n",
                add6months ? "false" : "true",
                (int)(next_6months_change - tv.tv_sec));

  // human readable
  Serial.print("ctime:     ");
  Serial.print(ctime(&now));

  // simple drifting loop
  Serial.println();
  delay(900);
}
