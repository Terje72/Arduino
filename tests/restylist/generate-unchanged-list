#!/bin/bash

force_fetch=false

show_changed_list ()
{
    while true; do
        read pr
        
        git reset --hard HEAD >& /dev/null
        git checkout -f master >& /dev/null
        git reset --hard HEAD >& /dev/null
        
        [ -z "$pr" ] && break
    
        # fetch is forced or branch not existent
        (${force_fetch} || ! git show-branch allmaner-pr-$pr > /dev/null) && \
            (git fetch upstream pull/$pr/head:allmaner-pr-$pr || continue)

        # try to merge
        git checkout -f allmaner-pr-$pr >& /dev/null
        git branch -D allmaner-pr-updated-$pr >& /dev/null
        git checkout -b allmaner-pr-updated-$pr >& /dev/null
        if ! git merge master >& /dev/null; then
            echo "PR #$pr is not mergeable"
            git merge --abort  >& /dev/null
            continue
        fi

        # get list of modified files
        git diff master..allmaner-pr-updated-$pr | sed -nre "s,(\+\+\+|---) [ab]/(.*),$pr:\2,p"

    done < list-pr.txt
}

# https://stackoverflow.com/questions/17423598/how-can-i-get-a-list-of-all-pull-requests-for-a-repo-through-the-github-api
# assuming there is less than 100 ongoing PRs

[ -f list.json ] || curl "https://api.github.com/repos/esp8266/arduino/pulls?state=opened&per_page=100" > list.json

# extract pr number
sed -Ene 's,.*(url.*/pulls/([0-9]*)\").*,\2,p' < list.json > list-pr.txt

# extract pr number and its base branch
# json reader might help
#sed -Ene 's,.*(url.*/pulls/([0-9]*)\"|\"sha\": \"([0-9a-f]*)).*,\2\3,p' < list.json > list-pr+head+base.txt

false && if [ ! -f list-pr-mergeable.txt ]; then
    rm -f list-pr-conflict.txt list-pr-mergeable.txt
    for pr in $(cat list-pr.txt); do
        [ -r .detail-pr-$pr.txt ] && grep exceeded .detail-pr-$pr.txt && rm -f .detail-pr-$pr.txt
        [ -r .detail-pr-$pr.txt ] || curl https://api.github.com/repos/esp8266/arduino/pulls/$pr > .detail-pr-$pr.txt
        [ -r .detail-pr-$pr.txt ] && grep exceeded .detail-pr-$pr.txt && rm -f .detail-pr-$pr.txt
        if grep '"mergeable": false' .detail-pr-$pr.txt; then
            echo "$pr" >> list-pr-conflict.txt
        else
            echo "$pr" >> list-pr-mergeable.txt
        fi
    done
fi

# generate list of changed files across all PRs
if [ ! -f list-changed.txt ]; then
    show_changed_list > list-changed-with-pr.txt
    cut -d: -f2 < list-changed-with-pr.txt > list-changed.txt
fi

(cd ../..; git ls-tree -r --name-only master) > list-master.txt

# remove not interesting files
for f in list-changed.txt list-master.txt; do
    grep -E '\.(c|cpp|h)$' $f | grep -vE '(/examples/|^tools/|/tools/sdk/|/\.build/|\.ino\.cpp)' | sort -u > $f.filtered
done

# final comparison
#grep -vxFf list-changed.txt.filtered list-master.txt.filtered > final-list-unchanged.txt
#grep -vxFf list-master.txt.filtered list-changed.txt.filtered > final-list-changed.txt
comm -1 -2 list-changed.txt.filtered list-master.txt.filtered > final-list-changed.txt
comm -1 -3 list-changed.txt.filtered list-master.txt.filtered > final-list-unchanged.txt
